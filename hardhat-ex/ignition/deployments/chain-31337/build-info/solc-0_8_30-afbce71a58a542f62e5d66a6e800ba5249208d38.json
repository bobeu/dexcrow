{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_30-afbce71a58a542f62e5d66a6e800ba5249208d38",
  "solcVersion": "0.8.30",
  "solcLongVersion": "0.8.30+commit.73712a01",
  "userSourceNameMap": {
    "contracts/trading/TradeFactory.sol": "project/contracts/trading/TradeFactory.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "prague",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC1363.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/extensions/IERC20Metadata.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/utils/SafeERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Pausable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "project/contracts/Approved.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.30;\r\n\r\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport { Pausable } from \"@openzeppelin/contracts/utils/Pausable.sol\";\r\n\r\nabstract contract Approved is Ownable, Pausable {\r\n    error AddressIsZero();\r\n    \r\n    event Approval(address indexed);\r\n    event UnApproval(address indexed);\r\n\r\n    // Mapping of account to approvals\r\n    mapping (address => bool) private approval;\r\n\r\n    // Only approved account is allowed\r\n    modifier onlyApproved {\r\n        require(_isApproved(_msgSender()), \"Not approved account\");\r\n        _;\r\n    }\r\n\r\n    constructor(address initOwner, address admin) Ownable(initOwner) {\r\n        _setPermission(admin, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Set approval for\r\n     * @param target : Account to set approval for\r\n     * @param value : Approval state - true or false\r\n     */\r\n    function _setPermission(address target, bool value) internal {\r\n        if(target == address(0)) revert AddressIsZero();\r\n        approval[target] = value;\r\n    }\r\n\r\n    /**\r\n     * @dev Set approval for target\r\n     * @param target : Account to set approval for\r\n     */\r\n    function setPermission(address target) public onlyOwner {\r\n        _setPermission(target, true);\r\n        emit Approval(target);\r\n    }\r\n\r\n    /**\r\n     * @dev Set approval for target\r\n     * @param target : Account to set approval for\r\n     */\r\n    function _isApproved(address target) internal view returns(bool result) {\r\n        result = approval[target];\r\n    }\r\n\r\n    /**\r\n     * @dev Set approval for target\r\n     * @param target : Account to set approval for\r\n     */\r\n    function isPermitted(address target) public view returns(bool) {\r\n        return _isApproved(target);\r\n    }\r\n\r\n    /**\r\n     * @dev Set approval for target\r\n     * @param target : Account to set approval for\r\n     */\r\n    function unApprove(address target) public onlyOwner {\r\n        _setPermission(target, false);\r\n        emit UnApproval(target);\r\n    }\r\n\r\n}"
      },
      "project/contracts/interfaces/ICommon.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.30;\r\n\r\n/**\r\n * @title ICommon\r\n * @dev Interface with commonly used data\r\n * @author Bobeu - https://github.com/bobeu\r\n */\r\ninterface ICommon {\r\n    // Structs\r\n    struct AccountInfo {\r\n        address user;\r\n        address tradingAccount;\r\n        uint256 createdAt;\r\n    }\r\n\r\n    struct SupportPaymentAsset {\r\n        address token;\r\n        uint8 decimals;\r\n        bytes name;\r\n        bytes symbol;\r\n    }\r\n\r\n    struct FactoryVariables {\r\n        uint platformFee;\r\n        uint feeDenom;\r\n        uint creationFee;\r\n        bool isPythSupported;\r\n        SupportPaymentAsset supportedPaymentAsset;\r\n        AccountInfo alc;\r\n    }\r\n\r\n}"
      },
      "project/contracts/interfaces/ITradeFactory.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.30;\r\n\r\nimport { ICommon } from \"./ICommon.sol\";\r\n\r\n/**\r\n * @title ITradeFactory\r\n * @dev Interface for the trade factory contract\r\n * @author Bobeu - https://github.com/bobeu\r\n */\r\ninterface ITradeFactory is ICommon {\r\n    \r\n    // ============ CUSTOM ERRORS ============\r\n    error Paused();\r\n    error InvalidOwner();\r\n    error AccountAlreadyExists();\r\n    error InvalidAmount();\r\n    error InvalidFee();\r\n    error TransferFailed();\r\n    error InvalidAddress();\r\n\r\n\r\n    enum FeeType {\r\n        PLATFORM,\r\n        CREATION\r\n    }\r\n\r\n    enum OrderStatus {\r\n        ACTIVE,\r\n        INACTIVE\r\n    }\r\n\r\n    struct Index {\r\n        uint index;\r\n        bool hasIndex;\r\n    }\r\n\r\n    struct FactoryData {\r\n        address owner;\r\n        uint256 platformFee;\r\n        uint256 totalFees;\r\n        uint256 totalAccounts;\r\n        AccountInfo[] accounts;\r\n        FactoryVariables variables;\r\n        bool isPaused;\r\n    }\r\n\r\n    // Events\r\n    event AccountCreated(\r\n        address indexed user,\r\n        address indexed tradingAccount,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event NewPaymentAssetAdded(\r\n        address indexed oldPaymentAsset,\r\n        address indexed newPaymentAsset\r\n    );\r\n\r\n    event FeeSet(\r\n        uint256 newFee,\r\n        FeeType feeType\r\n    );\r\n\r\n    event FeesWithdrawn(\r\n        uint256 amount,\r\n        address indexed to\r\n    );\r\n\r\n    // Functions\r\n    function getAccountInfo(address user) external view returns (AccountInfo memory);\r\n\r\n    function getVariables(address user) external view returns(FactoryVariables memory _fvs);\r\n\r\n    function createTradingAccount(address agent, string memory nickName) external returns(address account);\r\n}"
      },
      "project/contracts/interfaces/ITradingAccount.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.30;\r\n\r\nimport { ICommon } from \"./ICommon.sol\";\r\n\r\n/**\r\n * @title ITradingAccount\r\n * @dev Interface for individual trading accounts\r\n * @author Bobeu - https://github.com/bobeu\r\n */\r\ninterface ITradingAccount is ICommon {\r\n        // ============ CUSTOM ERRORS ============\r\n    error NoWithdrawalRequest();\r\n    error WithdrawalAlreadyProcessed();\r\n    error CooldownNotPassed();\r\n    error InsufficientBalance();\r\n    error OrderNotFound();\r\n    error OrderNotActive();\r\n    error InvalidAmount();\r\n    error OrderExpired();\r\n    error TransferFailed();\r\n    error PriceNotProvided();\r\n    error NoFundDetected();\r\n    error FundFaucetFailed();\r\n    error InvalidOrderId();\r\n    error MinimumFundingRequired();\r\n    error PendingWithdrawalRequest();\r\n    error InvalidPaymentAsset();\r\n    error TradeUnverified();\r\n    error InvalidTotalRequest();\r\n    error InvalidParameters();\r\n    error UnrecognizedAsset();\r\n    error TrickyMove();\r\n    error InvalidTokenOut();\r\n    error BalanceTooLow();\r\n    error FallbackExecutionFailed();\r\n    error InsufficientBalForRequestedToken();\r\n    error InvalidFallbackTradingAccount();\r\n\r\n    enum OrderStatus {\r\n        INACTIVE,\r\n        ACTIVE, \r\n        FULFILLED,\r\n        CANCELLED\r\n    }\r\n\r\n    // Structs\r\n    struct SellerInfo {\r\n        bytes nickName;\r\n        uint256 reputation;\r\n        address id;\r\n        bytes32 agentId;\r\n    }\r\n\r\n    struct OrderIndex {\r\n        uint index;\r\n        bool hasIndex;\r\n    }\r\n\r\n    struct AssetDetail {\r\n        uint8 decimals;\r\n        bytes name;\r\n        bytes symbol;\r\n        address tokenAddress;\r\n    }\r\n\r\n    struct OrderDetails {\r\n        uint256 amount;\r\n        uint256 pricePerUnit;\r\n        uint256 createdAt;\r\n        uint256 expiresAt;\r\n        AssetDetail assetInfo;\r\n        OrderStatus status;\r\n        bytes32 orderId;\r\n    }\r\n\r\n    struct AccountData {\r\n        address owner;\r\n        OrderDetails[] orders;\r\n        uint256 successfulOrders;\r\n        uint256 cancelledOrders;\r\n        SellerInfo sellerInfo;\r\n    }\r\n\r\n    // Events\r\n    event OrderCreated(\r\n        bytes32 indexed orderId,\r\n        address indexed tokenAddress,\r\n        uint indexed orderIndex,\r\n        uint256 amount,\r\n        uint256 price,\r\n        bool useLivePrice\r\n    );\r\n    \r\n    event OrderCancelled(\r\n        bytes32 indexed orderId,\r\n        address indexed tokenAddress,\r\n        uint256 amount\r\n    );\r\n    \r\n    event AssetDeposited(\r\n        address indexed token,\r\n        uint256 amount,\r\n        uint256 erc20Balance,\r\n        uint256 nativeBalance\r\n    );\r\n    \r\n    event AssetWithdrawn(\r\n        address indexed token,\r\n        uint256 amount,\r\n        uint256 newBalance\r\n    );\r\n     \r\n    event OrderFulfilled(\r\n        bytes32 indexed orderId,\r\n        address indexed buyer,\r\n        uint256 amount\r\n    );\r\n\r\n    event ExchangeSuccess(\r\n        address indexed seller, \r\n        uint256 totalCost, \r\n        uint256 volume, \r\n        uint pricePerUnit, \r\n        address indexed tokenOut, \r\n        address indexed tokenIn\r\n    );\r\n    \r\n    event OrderActivated(bytes32 orderId, uint newDuration);\r\n\r\n    // Functions\r\n    function createOrder(\r\n        address tokenAddress,\r\n        uint256 amount,\r\n        uint256 price,\r\n        uint256 expirationHours\r\n    ) external payable returns(bool);\r\n\r\n    function cancelOrder(bytes32 orderId) external returns(bool);\r\n\r\n    function deposit(address token) external payable returns(bool);\r\n\r\n    function fulfillOrder(bytes32 orderId, address buyer, uint256 amount) external returns(bool);\r\n\r\n    function getAccountData() external view returns (AccountData memory);\r\n\r\n    function getBalance(address token) external view returns (uint256);\r\n\r\n    function getLockedBalance(address token) external view returns (uint256);\r\n\r\n    function exchangeValues(uint256 totalCost, uint pricePerUnit, address tokenIn, address tokenOut) external payable returns(bool);\r\n}"
      },
      "project/contracts/trading/peripherals/TradingAccount.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.30;\r\n\r\nimport { ITradingAccount } from \"../../interfaces/ITradingAccount.sol\";\r\nimport { ITradeFactory } from \"../../interfaces/ITradeFactory.sol\";\r\nimport { ReentrancyGuard } from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport { IERC20Metadata } from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\r\nimport { Approved } from \"../../Approved.sol\";\r\n\r\n/**\r\n * @title TradingAccount\r\n * @dev Individual trading account contract for each user\r\n * @author Bobeu - https://github.com/bobeu\r\n */\r\ncontract TradingAccount is ITradingAccount, ReentrancyGuard, Approved {\r\n    using SafeERC20 for IERC20;\r\n\r\n    // ============ CUSTOM ERRORS ============\r\n    error InvalidDuration();\r\n    error InsufficientOrderDurationFee();\r\n\r\n    // ============ STATE VARIABLES ============\r\n\r\n    /**\r\n    * @dev Trade factory contract\r\n     */\r\n    ITradeFactory private immutable tradeFactory;\r\n\r\n    /**\r\n     * @dev Mapping of order IDs to their respective index in the order array\r\n     */\r\n    mapping(bytes32 => OrderIndex) private orderIndex;\r\n\r\n    /**\r\n     * @dev Mapping of token addresses to balances\r\n     */\r\n    mapping(address => uint256) private _balances;\r\n\r\n    /**\r\n     * @dev Mapping of token addresses to locked balances (in orders)\r\n     */\r\n    mapping(address => uint256) private _lockedBalances;\r\n   \r\n    /**\r\n     * @dev Mapping of token addresses to boolean\r\n     * Account owners should always add token to verified list before they place buy order.\r\n     * This is to protect against certain form of attacks where an actor could impersonate a token\r\n     * and use it as purchasing asset.\r\n     */\r\n    mapping(address => bool) private isVerified;\r\n\r\n    /**\r\n     * @dev Number of successful orders\r\n     */\r\n    uint256 private _successfulOrders;\r\n\r\n    /**\r\n     * @dev Number of cancelled orders\r\n     */\r\n    uint256 private _cancelledOrders;\r\n\r\n    /**\r\n     * @dev Seller info\r\n     */\r\n    SellerInfo private info;\r\n\r\n    /**\r\n     * @dev Order list\r\n     */\r\n    OrderDetails[] private orders;\r\n\r\n    // ============ CONSTRUCTOR ============\r\n\r\n    /**\r\n     * @dev Constructor to initialize the trading account\r\n     * @param _seller Address of the account owner\r\n     * @param agent Agent to act on behalf of the seller\r\n     * @param controller Address of the controller\r\n     * @param nickname Seller's Alias or trade identifier\r\n    */\r\n    constructor(\r\n        address _seller, \r\n        address agent, \r\n        address controller, \r\n        string memory nickname\r\n    ) Approved(controller, _seller) \r\n    {\r\n        if(agent != address(0) && agent != _seller) _setPermission(agent, true);\r\n        info.nickName = abi.encode(nickname);\r\n        info.id = _seller;\r\n        info.agentId = keccak256(abi.encodePacked(agent, _now(), nickname));\r\n        tradeFactory = ITradeFactory(_msgSender());\r\n    }\r\n\r\n    // Sending ETH via this method activates sell order for native asset\r\n    receive() external payable {}\r\n\r\n    // ============ EXTERNAL FUNCTIONS ============\r\n\r\n    // Update nickName\r\n    function setNickName(string memory nickName) external onlyApproved returns(bool) {\r\n        info.nickName = abi.encode(bytes(nickName));\r\n        return true;\r\n    }\r\n\r\n    // Update nickName\r\n    function toggleTokenVerificationStatus(address token) external onlyApproved returns(bool) {\r\n        if(token == address(0)) revert InvalidTokenOut();\r\n        bool status = isVerified[token];\r\n        isVerified[token] = !status;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Create a new trading order\r\n     * @param tokenAddress Token address\r\n     * @param amount Amount of tokens to trade\r\n     * @param price Price per token\r\n     * @param expirationHours Hours until order expires\r\n     * @return orderId Unique identifier for the order\r\n     * @notice Orders are free up to 24 hours. Subsequent extra hours are charged based on the creating fee\r\n     */\r\n    function createOrder(\r\n        address tokenAddress,\r\n        uint256 amount,\r\n        uint256 price,\r\n        uint256 expirationHours\r\n    ) external payable onlyApproved nonReentrant whenNotPaused returns(bool) {\r\n        unchecked {\r\n            if(amount == 0) revert InvalidAmount();\r\n            uint expiration = expirationHours * 1 hours;\r\n            FactoryVariables memory fv = tradeFactory.getVariables(_msgSender());\r\n            if(expirationHours == 0) {\r\n                expiration = 24 hours;\r\n            } else {\r\n                if(expirationHours > 24) {\r\n                    uint listDurationFee = fv.creationFee * (expiration - 24);\r\n                    if(listDurationFee > 0) {\r\n                        if(msg.value < listDurationFee) {\r\n                            if(_balances[address(0)] >= listDurationFee) {\r\n                                _balances[address(0)] -= listDurationFee;\r\n                            } else {\r\n                                revert InsufficientOrderDurationFee();\r\n                            }\r\n                            \r\n                        }\r\n                        (bool sent,) = payable(owner()).call{value:listDurationFee}('');\r\n                        if(!sent) revert TransferFailed();\r\n                    }\r\n                }\r\n            }\r\n            if(!fv.isPythSupported){\r\n                if(price == 0) revert PriceNotProvided();\r\n            }\r\n            // Generate unique order ID\r\n            bytes32 orderId = keccak256(abi.encodePacked(\r\n                _now(),\r\n                info.id,\r\n                tokenAddress,\r\n                amount,\r\n                orders.length\r\n            ));\r\n            uint currentTime = _now();\r\n            \r\n            // Create order details\r\n            uint index = orders.length;\r\n            orderIndex[orderId] = OrderIndex(index, true);\r\n            orders.push(\r\n                OrderDetails({\r\n                    orderId: orderId,\r\n                    amount: amount,\r\n                    pricePerUnit: price,\r\n                    createdAt: currentTime,\r\n                    expiresAt: currentTime + expiration,\r\n                    assetInfo: _getAssetInfo(tokenAddress, amount),\r\n                    status: OrderStatus.ACTIVE\r\n                })\r\n            );\r\n\r\n            // Lock the funds for this order\r\n            _balances[tokenAddress] -= amount;\r\n            _lockedBalances[tokenAddress] += amount;\r\n\r\n            emit OrderCreated(orderId, tokenAddress, index, amount, price, price == 0);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function _validateOrder(bytes32 orderId) internal view returns(OrderDetails storage orderDetails) {\r\n        OrderIndex memory oi = orderIndex[orderId];\r\n        if(!oi.hasIndex) revert InvalidOrderId();\r\n        orderDetails = orders[oi.index];\r\n        if(orderDetails.status != OrderStatus.ACTIVE) revert OrderNotActive();\r\n        if(orderDetails.amount == 0) revert OrderNotFound();\r\n    }\r\n\r\n    /**\r\n     * @dev Cancel an existing order\r\n     * @param orderId ID of the order to cancel\r\n     */\r\n    function cancelOrder(bytes32 orderId) external nonReentrant onlyApproved whenNotPaused returns(bool) {\r\n        OrderDetails storage orderDetails = _validateOrder(orderId);\r\n        orderDetails.status = OrderStatus.CANCELLED;\r\n\r\n        _cancelledOrders++;\r\n\r\n        // Unlock the balance\r\n        address tokenAddr = orderDetails.assetInfo.tokenAddress;\r\n        unchecked {\r\n            uint256 lockedBal = _lockedBalances[tokenAddr];\r\n            if(lockedBal >= orderDetails.amount) _lockedBalances[tokenAddr] -= orderDetails.amount;\r\n            _balances[tokenAddr] += orderDetails.amount;\r\n\r\n            if(info.reputation > 0) info.reputation -= 1;\r\n        }\r\n\r\n        emit OrderCancelled(orderId, tokenAddr, orderDetails.amount);\r\n        orderDetails.amount = 0;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Deposit tokens into the trading account\r\n     * @param token Token address (address(0) for native ETH)\r\n     * @notice Seller can deposit. Anyone can also deposit on their behalf\r\n     */\r\n    function deposit(address token) external payable onlyApproved nonReentrant whenNotPaused returns(bool) {\r\n        address from = info.id;\r\n        uint amount = msg.value;\r\n        \r\n        unchecked {\r\n            if(token != address(0)) {\r\n                IERC20 tk = IERC20(token);\r\n                uint256 allowanceFromSeller = tk.allowance(from, address(this));\r\n                uint256 allowanceFromSender = tk.allowance(_msgSender(), address(this));\r\n                (from, amount) = allowanceFromSeller > 0? (from, allowanceFromSeller) : (_msgSender(), allowanceFromSender);\r\n                if(amount == 0) revert InvalidAmount();\r\n                tk.safeTransferFrom(from, address(this), amount);\r\n                _balances[token] += amount;\r\n            } else {\r\n                if(amount == 0) revert InvalidAmount();\r\n                _balances[token] += amount;\r\n            }\r\n        }\r\n\r\n        emit AssetDeposited(token, amount, _balances[token], _balances[address(0)]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Process withdrawal after cooldown period\r\n     * @param token Token address to withdraw\r\n     * @param amount Amount to withdraw\r\n     */\r\n    function withdraw(address token, uint256 amount) \r\n        external \r\n        onlyApproved\r\n        nonReentrant \r\n        returns(bool)\r\n    {\r\n        uint256 balances = _balances[token];\r\n        if(balances < amount) revert BalanceTooLow();\r\n        unchecked {\r\n            _balances[token] = balances - amount;\r\n        }\r\n        address _seller = info.id;\r\n        if(token == address(0)) {\r\n            // Native ETH withdrawal\r\n            (bool success, ) = payable(_seller).call{value: amount}(\"\");\r\n            if(!success) revert TransferFailed();\r\n        } else {\r\n            // ERC20 token withdrawal\r\n            IERC20(token).safeTransfer(_seller, amount);\r\n        }\r\n\r\n        emit AssetWithdrawn(token, amount, _balances[token]);\r\n        return true;\r\n    }\r\n\r\n    // ============ FACTORY FUNCTIONS ============\r\n    \r\n    /**\r\n     * @dev Exchange values between the trading account of seller and that of the Buyer\r\n     * @param totalCost : Total amount requested as payment\r\n     * @param pricePerUnit : Price per unit of token in trade\r\n     * @param tokenIn : Address of token purchased. Defaults to Native coin if it is zero address\r\n     * @param tokenOut : Payment token address\r\n     * @notice The receiving trading account verifies that trade actually exist between the caller and the owner of this account\r\n     * The result of the computation determines whether this account will release fund or not. Anyone is free to call this function \r\n     * provided they have a genuine trade and are willing to share real value.\r\n     */\r\n    function exchangeValues(uint256 totalCost, uint pricePerUnit, address tokenIn, address tokenOut) external payable nonReentrant returns(bool) {\r\n        // Verify that requested amount and the value seller is willing to give out corresponds otherwise quit\r\n        if(totalCost == 0 || pricePerUnit == 0) revert InvalidParameters();\r\n        if(totalCost < pricePerUnit) {\r\n            revert InvalidTotalRequest();\r\n        } else {\r\n            uint volume = totalCost / pricePerUnit;\r\n            if(volume == 0) revert TradeUnverified();\r\n            if(tokenIn != address(0)) {\r\n                // Purchase was ERC20 token\r\n                if(!isVerified[tokenIn]) revert UnrecognizedAsset();\r\n                IERC20 tk = IERC20(tokenIn);\r\n                if(tk.allowance(_msgSender(), address(this)) < volume) revert TrickyMove();\r\n                tk.safeTransferFrom(_msgSender(), address(this), volume);\r\n                if(tokenOut == address(0)) {\r\n                    revert InvalidPaymentAsset();\r\n                } else {\r\n                    tk = IERC20(tokenOut);\r\n                    if(_balances[tokenOut] < totalCost) revert InsufficientBalForRequestedToken();\r\n                    _balances[tokenOut] -= totalCost;\r\n                    tk.safeTransfer(_msgSender(), totalCost);\r\n                    info.reputation += 5;\r\n                    \r\n                    emit ExchangeSuccess(_msgSender(), totalCost, volume, pricePerUnit, tokenOut, tokenIn);\r\n                }\r\n            } else {\r\n                // Purchase was in Native coin\r\n                if(msg.value < volume) revert TrickyMove();\r\n            }\r\n        }\r\n        return true;\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Activate expired order \r\n     * @param orderId ID of the order to activate\r\n     * @param durationInHours New duration (in hours) through which target order will be valid\r\n     */\r\n    function activateOrder(bytes32 orderId, uint32 durationInHours) external payable onlyApproved() returns(bool) {\r\n        OrderDetails storage orderDetails = _validateOrder(orderId);\r\n        if(durationInHours == 0) revert InvalidDuration();\r\n        FactoryVariables memory fv = ITradeFactory(owner()).getVariables(_msgSender());\r\n        unchecked {\r\n            uint listDurationFee = fv.creationFee * durationInHours;\r\n            uint newDuration = durationInHours * 1 hours;\r\n            if(msg.value < listDurationFee) {\r\n                if(_balances[address(0)] >= listDurationFee) {\r\n                    _balances[address(0)] -= listDurationFee;\r\n                } else {\r\n                    revert InsufficientOrderDurationFee();\r\n                }\r\n                \r\n            }\r\n            (bool sent,) = payable(owner()).call{value:listDurationFee}('');\r\n            if(!sent) revert TransferFailed();\r\n            orderDetails.expiresAt = newDuration;\r\n            \r\n            emit OrderActivated(orderId, newDuration);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Fulfill an order (called by factory)\r\n     * @param orderId ID of the order to fulfill\r\n     * @param buyer Address of the buyer\r\n     * @param amount Amount being traded\r\n     * @notice Either buyer or their representative agent can fulfil an order trade.\r\n     * Payment for all assets is in stablecoin.\r\n     */\r\n    function fulfillOrder(bytes32 orderId, address buyer, uint256 amount) external returns(bool) {\r\n        OrderDetails storage orderDetails = _validateOrder(orderId);\r\n        if(orderDetails.status != OrderStatus.ACTIVE) revert OrderNotActive();\r\n        if(_now() > orderDetails.expiresAt) revert OrderExpired();\r\n        orderDetails.status = OrderStatus.FULFILLED;\r\n        _successfulOrders++;\r\n\r\n        // Unlock the balance\r\n        uint amountTaken = amount;\r\n        address tokenAddr = orderDetails.assetInfo.tokenAddress;\r\n        unchecked {\r\n            if(amount >= orderDetails.amount) {\r\n                amountTaken = orderDetails.amount;\r\n                orderDetails.amount = 0;\r\n            } else {\r\n                orderDetails.amount -= amount;\r\n            }\r\n            _lockedBalances[tokenAddr] = orderDetails.amount;\r\n        }\r\n\r\n        FactoryVariables memory fv = ITradeFactory(owner()).getVariables(_msgSender());\r\n        uint totalCost;\r\n        if(orderDetails.pricePerUnit == 0) {\r\n            // Use price oracle\r\n        } else {\r\n            totalCost = orderDetails.pricePerUnit * amountTaken; // Price should be in decimals form\r\n        }\r\n        if(fv.supportedPaymentAsset.token == address(0)) revert InvalidPaymentAsset();\r\n        IERC20 tk = IERC20(fv.supportedPaymentAsset.token);\r\n        if(tk.allowance(_msgSender(), address(this)) >= totalCost) {\r\n            tk.safeTransferFrom(_msgSender(), address(this), totalCost);\r\n        } else {\r\n            if(fv.alc.tradingAccount == address(0)) revert InvalidFallbackTradingAccount();\r\n            if(tokenAddr == address(0)) {\r\n                if(!ITradingAccount(fv.alc.tradingAccount).exchangeValues{value: amount}(totalCost, orderDetails.pricePerUnit, tokenAddr, fv.supportedPaymentAsset.token)) revert FallbackExecutionFailed();\r\n            } else {\r\n                IERC20(tokenAddr).safeIncreaseAllowance(fv.alc.tradingAccount, amount);\r\n                if(!ITradingAccount(fv.alc.tradingAccount).exchangeValues(totalCost, orderDetails.pricePerUnit, tokenAddr, fv.supportedPaymentAsset.token)) revert FallbackExecutionFailed();\r\n            }\r\n        }\r\n        \r\n        info.reputation += 2;\r\n\r\n        emit OrderFulfilled(orderId, buyer, amount);\r\n        return true;\r\n    }\r\n\r\n    // ============ VIEW FUNCTIONS ============\r\n\r\n    function _getAssetInfo(address tokenAddr, uint256 amount) internal view returns(AssetDetail memory _info) {\r\n        if(_balances[tokenAddr] < amount) {\r\n            revert MinimumFundingRequired();\r\n        }\r\n        if(tokenAddr != address(0)) {\r\n            IERC20 tk = IERC20(tokenAddr);\r\n            // Check that the trading account has the tokens\r\n            if(tk.balanceOf(address(this)) == 0) {\r\n                // Check that the seller has approved the trading account to spend the tokens\r\n                if(tk.allowance(info.id, address(this)) == 0) {\r\n                    revert NoFundDetected();\r\n                }\r\n            }\r\n            _info =  AssetDetail(\r\n                IERC20Metadata(tokenAddr).decimals(), // Default to 18 decimals for ERC20 tokens\r\n                abi.encode(IERC20Metadata(tokenAddr).name()), // Default name\r\n                abi.encode(IERC20Metadata(tokenAddr).symbol()), // Default symbol\r\n                tokenAddr \r\n            );\r\n        } else {\r\n            _info =  AssetDetail(\r\n                18, // Default to 18 decimals for native ETH\r\n                \"Ethereum\", // Default name\r\n                \"ETH\", // Default symbol\r\n                tokenAddr \r\n            );\r\n        }\r\n    }\r\n\r\n    // Get the latest time stamp\r\n    function _now() internal view returns(uint currentTime) {\r\n        currentTime = block.timestamp;\r\n    }\r\n\r\n    /**\r\n     * @dev Get comprehensive account information\r\n     * @return accountData Packed account data\r\n     */\r\n    function getAccountData() external view override returns (AccountData memory accountData) {\r\n        accountData = AccountData({\r\n            owner: info.id,\r\n            orders: orders,\r\n            successfulOrders: _successfulOrders,\r\n            cancelledOrders: _cancelledOrders,\r\n            sellerInfo: info\r\n        });\r\n        return accountData;\r\n    }\r\n\r\n    /**\r\n     * @dev Get balance for a specific token\r\n     * @param token Token address\r\n     * @return balance Token balance\r\n     */\r\n    function getBalance(address token) external view returns (uint256 balance) {\r\n        balance = _balances[token];\r\n        return balance;\r\n    }\r\n\r\n    /**\r\n     * @dev Get locked balance for a specific token\r\n     * @param token Token address\r\n     * @return lockedBalance Locked token balance\r\n     */\r\n    function getLockedBalance(address token) external view override returns (uint256 lockedBalance) {\r\n        lockedBalance = _lockedBalances[token];\r\n        return lockedBalance;\r\n    }\r\n\r\n    // ============ ADMIN FUNCTIONS ============\r\n\r\n    /**\r\n     * @dev Pause execution \r\n     * Only the factory contract can pause the Trading account\r\n     */\r\n    function pause() public onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    /**\r\n     * @dev Resume execution \r\n     * Only the factory contract can pause the Trading account\r\n     */\r\n    function unpause() public onlyOwner {\r\n        _unpause();\r\n    }\r\n}"
      },
      "project/contracts/trading/TradeFactory.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.30;\r\n\r\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport { TradingAccount, IERC20, ITradingAccount, ITradeFactory, IERC20Metadata } from \"./peripherals/TradingAccount.sol\";\r\n\r\n/**\r\n * @title TradeFactory\r\n * @dev Factory contract for managing trading accounts and orders\r\n * @author Bobeu : https://github.com/bobeu\r\n */\r\ncontract TradeFactory is ITradeFactory, Ownable {\r\n    // ============ STATE VARIABLES ============\r\n\r\n    /**\r\n     * @dev Mapping of user addresses to positions in the account array\r\n     */\r\n    mapping(address => Index) private _indexes;\r\n\r\n    /**\r\n     * @dev Total accounts created to date\r\n     */\r\n    AccountInfo[] private _accounts;\r\n\r\n    /**\r\n     * @dev Stable asset universally acceptable as payment across all Trading accounts\r\n     */\r\n    SupportPaymentAsset private supportedPaymentAsset;\r\n\r\n    /**\r\n     * @dev Platform fee percentage (in basis points)\r\n     */\r\n    uint256 private _platformFee = 50; // 0.5%\r\n\r\n    /**\r\n     * @dev Total fees collected\r\n     */\r\n    uint256 private _totalFees;\r\n\r\n    /**\r\n     * @dev Fee denominator for calculations\r\n     */\r\n    uint256 private constant FEE_DENOMINATOR = 10000;\r\n\r\n    /**\r\n     * @dev Required fee for listing an order for some period of time\r\n     */\r\n    uint256 private creationFee;\r\n\r\n    /**\r\n     * @dev Whether the current chain is supported by Pyth for price data or not\r\n     */\r\n    bool private isPythSupported;\r\n\r\n    /**\r\n     * @dev Pause or resume execution\r\n     */\r\n    bool private isPaused;\r\n\r\n    /**\r\n     * @dev Only valid address is allowed\r\n     */\r\n    modifier onlyValidAddress(address target) {\r\n        if(target == address(0)) revert InvalidAddress();\r\n        _;\r\n    }\r\n\r\n    // ============ CONSTRUCTOR ============\r\n\r\n    /**\r\n     * @dev Constructor to initialize the trade factory\r\n     */\r\n    constructor() Ownable(_msgSender()) {\r\n        creationFee = 1e15 wei; // 0.0015 ether per 24 hours\r\n    }\r\n\r\n    // ============ INTERNAL FUNCTIONS ============\r\n\r\n    /**\r\n     * @dev Create a new trading account for a seller - internal\r\n     * @param seller Address of the seller\r\n     * @param agent Seller's agent address\r\n     * @param nickName Seller's alias\r\n     * @return account Address of the created trading account\r\n     */\r\n    function _tryGetTradingAccount(address seller, address agent, string memory nickName) internal returns(address account) {\r\n        if(seller == address(0)) revert InvalidOwner();\r\n        Index memory id = _indexes[seller];\r\n        if(!id.hasIndex) {\r\n            // Deploy new trading account and save to storage\r\n            uint currentTime = _now();\r\n            account = address(new TradingAccount(seller, agent, owner(), nickName));\r\n            _indexes[seller] = Index(_accounts.length, true);\r\n            _accounts.push(\r\n                AccountInfo({\r\n                    user: seller,\r\n                    tradingAccount: account,\r\n                    createdAt: currentTime\r\n                })\r\n            );\r\n            \r\n            emit AccountCreated(seller, account, currentTime);\r\n        } else {\r\n            account = _accounts[id.index].tradingAccount;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get trading account for a user\r\n     * @param user User address\r\n     * @return account Trading account data\r\n     */\r\n    function _getAccountInfo(address user) internal view returns (AccountInfo memory account) {\r\n        Index memory id = _indexes[user];\r\n        if(id.hasIndex) {\r\n            account = _accounts[id.index];\r\n        }\r\n    }\r\n\r\n     // Return the fee parameters in state\r\n    function _getFeeVariables(address any) internal view returns(FactoryVariables memory _fvs) {\r\n        _fvs.creationFee = creationFee;\r\n        _fvs.feeDenom = FEE_DENOMINATOR;\r\n        _fvs.isPythSupported = isPythSupported;\r\n        _fvs.platformFee = _platformFee;\r\n        _fvs.supportedPaymentAsset = supportedPaymentAsset;\r\n        _fvs.alc = _getAccountInfo(any);\r\n    }\r\n\r\n    // ============ EXTERNAL FUNCTIONS ============\r\n\r\n    /**\r\n     * @dev Create a new trading account for a user\r\n     * @param agent Address of the user's agent if any\r\n     * @return account Address of the created trading account\r\n     * @notice Uses the msg.sender if the parsed address is empty otherwise defaults to user. This allows approved or external accounts\r\n     * such as agent to act on behalf of another.\r\n     */\r\n    function createTradingAccount(address agent, string memory nickName) external returns (address account) {\r\n        if(isPaused) revert Paused();\r\n        address seller = _msgSender();\r\n        Index memory id = _indexes[seller];\r\n        if(id.hasIndex) revert AccountAlreadyExists();\r\n        return _tryGetTradingAccount(seller, agent, nickName);\r\n    }\r\n\r\n    // ============ FEE MANAGEMENT ============\r\n\r\n    /**\r\n     * @dev Set platform fee\r\n     * @param newFee New fee percentage (in basis points)\r\n     */\r\n    function setPlatformFee(uint256 newFee) external onlyOwner returns(bool) {\r\n        if(newFee > 5000) revert InvalidFee(); // Arbitrary fee\r\n        _platformFee = newFee;\r\n        emit FeeSet(newFee, FeeType.PLATFORM);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Set order creation fee\r\n     * @param newFee New fee percentage (in basis points)\r\n     */\r\n    function setCreationFee(uint256 newFee) external onlyOwner returns(bool){\r\n        creationFee = newFee;\r\n        emit FeeSet(newFee, FeeType.CREATION);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Set order creation fee\r\n     * @param newPaymentAsset New supported payment asset - Supports stablecoin only\r\n     */\r\n    function setSupportedPaymentAsset(address newPaymentAsset) external onlyOwner returns(bool){\r\n        emit NewPaymentAssetAdded(supportedPaymentAsset.token, newPaymentAsset);\r\n        IERC20Metadata tk = IERC20Metadata(newPaymentAsset);\r\n        supportedPaymentAsset = SupportPaymentAsset({\r\n            decimals: tk.decimals(),\r\n            name: abi.encode(bytes(tk.name())),\r\n            symbol: abi.encode(bytes(tk.symbol())),\r\n            token: newPaymentAsset\r\n        });\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Toggle Pyth support status\r\n     * @return status New Pyth support status\r\n     */\r\n    function toggleIsPythSupportedNetwork() external onlyOwner returns(bool) {\r\n        bool status = isPythSupported;\r\n        isPythSupported = !status;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw collected fees\r\n     */\r\n    function withdrawFees() external onlyOwner {\r\n        uint256 amount = _totalFees;\r\n        if(amount == 0) revert InvalidAmount();\r\n\r\n        _totalFees = 0;\r\n        address _owner = owner();\r\n        uint contractBal = address(this).balance;\r\n        if(contractBal < amount || (amount == 0 && contractBal > amount)) amount = contractBal;\r\n        (bool success, ) = payable(_owner).call{value: amount}(\"\");\r\n        if(!success) revert TransferFailed();\r\n\r\n        emit FeesWithdrawn(amount, _owner);\r\n    }\r\n\r\n    // ============ VIEW FUNCTIONS ============\r\n\r\n    // Return the fee parameters in state\r\n    function getVariables(address any) external view returns(FactoryVariables memory) {\r\n        return _getFeeVariables(any);\r\n    }\r\n\r\n    // Get the current block time stamp\r\n    function _now() internal view returns(uint currentTime) {\r\n        currentTime = block.timestamp;\r\n    }\r\n\r\n    /**\r\n     * @dev Get comprehensive factory data\r\n     * @return factoryData Packed factory data\r\n     */\r\n    function getFactoryData(address any) external view returns (FactoryData memory factoryData) {\r\n        factoryData = FactoryData({\r\n            owner: owner(),\r\n            platformFee: _platformFee,\r\n            totalFees: _totalFees,\r\n            totalAccounts: _accounts.length,\r\n            accounts: _accounts,\r\n            variables: _getFeeVariables(any),\r\n            isPaused: isPaused\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @dev Get trading account for a user\r\n     * @param user User address\r\n     * @return account Trading account data\r\n     */\r\n    function getAccountInfo(address user) external view override returns (AccountInfo memory) {\r\n        return _getAccountInfo(user);\r\n    }\r\n\r\n    // ============ ADMIN FUNCTIONS ============\r\n    /**\r\n     * @dev Pause the contract\r\n     */\r\n    function toggleExecution(bool status) external onlyOwner {\r\n        isPaused = status;\r\n    }\r\n\r\n}"
      }
    }
  }
}